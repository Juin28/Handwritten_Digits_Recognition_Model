# -*- coding: utf-8 -*-
"""Handwritten_Digits_Recognition_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_-rLJa1h_efbce3ZK-6JGajNkn_7uG3d

# Handwritten Digits Recognition using CNN
"""

import numpy as np
import pandas as pd
import seaborn as sn
import matplotlib.pyplot as plt
import datetime
import math
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Dense, Dropout, Flatten
from keras.utils import to_categorical
from keras.callbacks import TensorBoard
from keras.models import load_model
from tensorflow.keras.utils import plot_model
from tensorflow.math import confusion_matrix
from tensorflow.keras.metrics import categorical_crossentropy

batch_size = 128
num_classes = 10
epochs = 5
img_rows, img_cols = 28, 28

(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train.reshape(60000, 28, 28, 1)
x_test = x_test.reshape(10000, 28, 28, 1)

y_train = to_categorical(y_train, num_classes)
y_test = to_categorical(y_test, num_classes)

model = Sequential()

model.add(
    Conv2D(
        filters=32,
        kernel_size=(3, 3),
        activation='relu',
        input_shape=(28, 28, 1)
    )
)

model.add(
    Conv2D(
        filters=64,
        kernel_size=(3, 3),
        activation='relu'
    )
)

model.add(
    MaxPooling2D(
        pool_size=(2,2)
    )
)

model.add(
    Dropout(0.25)
)

model.add(
    Flatten()
)

model.add(
    Dense(
        units=128,
        activation='relu'
    )
)

model.add(
    Dropout(0.50)
)

model.add(
    Dense(
        units=num_classes,
        activation='softmax'
    )
)

model.summary()

plot_model(model, show_shapes=True, show_layer_names=True)

model.compile(
    optimizer='adam',
    loss=categorical_crossentropy,
    metrics=['accuracy']
)

log_dir=".logs/fit/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = TensorBoard(log_dir=log_dir, histogram_freq=1)

training_history = model.fit(
    x_train, y_train,
    batch_size=batch_size,
    epochs=epochs,
    validation_data=(x_test, y_test),
    callbacks=[tensorboard_callback]
)

validation_loss, validation_accuracy = model.evaluate(x_test, y_test, verbose=0)

print(f'Validation loss: {validation_loss}')
print(f'Validation accuracy: {validation_accuracy}')

model_name = 'handwritten_digits_recognition_cnn.h5'
model.save(model_name, save_format='h5')

loaded_model = load_model(model_name)
predictions = loaded_model.predict([x_test])

prediction_results = np.argmax(predictions, axis=1)
print(prediction_results.shape)

image_index = (int)(input("Enter an image index: "))
plt.imshow(x_test[image_index].reshape(28, 28), cmap='Greys')

prediction = loaded_model.predict(x_test[image_index].reshape(1, 28, 28, 1))

print(f'Predicted result: {prediction.argmax()}')

numbers_to_display = 100

num_cells = math.ceil(math.sqrt(numbers_to_display))
plt.figure(figsize=(10, 10))

for i in range(numbers_to_display):
  plt.subplot(num_cells, num_cells, i + 1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  color_map = 'Greens' if prediction_results[i] == y_test[i].argmax() else 'Reds'
  plt.imshow(x_test[i], cmap=color_map)
  plt.xlabel(prediction_results[i])

plt.subplots_adjust(hspace=1, wspace=0.5)
plt.show()

y_test_results = np.argmax(y_test, axis=1)

cm = confusion_matrix(y_test_results, prediction_results)
f, ax = plt.subplots(figsize=(9, 9))
sn.heatmap(
    cm,
    annot=True,
    linewidths=0.5,
    fmt='d',
    square=True,
    ax=ax
)
plt.show()